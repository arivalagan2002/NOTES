Peripheral:
GPIO :
•	It has space for eight and those space has registers. 
•	These are named from GPIOA to GPIOH.
•	GPIOA to GPIOH has the same memory register but different address.
•	Those are:
o	MODER
o	OSPEEDR
o	PUPDR
o	IDR
o	ODR
o	BSRR
o	LCKR
o	AFRL
o	AFRH
•	When we know the Base and Offset we will know where the starting address is.
o	Base – Starting Address = Offset
o	Base + Offset = Staring Address

PROGRAM:

#define PERIPH_BASE  			(0x40000000UL) 
/* Used to define the base address in Unsigned Long*/

#define AHB1PERIPH_OFFSET         	 (0x00020000UL)
/*defines the offset for AHB1 in Unsigned Long*/ 

#define AHB1PERIPH_BASE          (PERIPH_BASE + AHB1PERIPH_OFFSET)
/*To find the base for AHB1 we use this method  of adding the peripheral base and AHB1 offset value*/

#define GPIOA_OFFSET  			(0x0000UL)
/*the Unsigned Long is used to define the GPIO Offset value*/

#define GPIO_BASE 			(AHB1PERIPH_BASE + GPIO_OFFSET)
/*to fine the base for the peripheral GPIO*/

#define RCC_OFFSET			(0x3800UL)
/*Used to define the RCC_OFFSET */

#define RCC_BASE			(AHB1PERIPH_BASE + RCC_OFFSET)
/*The base for RCC is found by the above method*/

#define AHB1EN_R_OFFSET		(0x30UL)
/*This define is used to access the register present in that address which is found by the above methods*/

#define RCC_AHB1EN_R   (*(volatile unsigned int*)(RCC_BASE + AHB1EN_R_OFFSET))
/*The above line is used to convert the number into address after which the space with that specific address can be accessed*/ 

#define MODE_R_OFFSET				(0x00UL)
#define GPIOA_MODE_R	    (*(volatile unsigned int *)(GPIOA_BASE + MODE_R_OFFSET))
#define OD_R_OFFSET				(0x14UL)
#define GPIOA_OD_R	(*(volatile unsigned int *)(GPIOA_BASE +  OD_R_OFFSET))
#define  GPIOAEN				(1U<<0) //   0b 0000 0000 0000 0000 0000 0000 0000 0001
#define PIN5					(1U<<5)
#define LED_PIN					 PIN5
/*
 * (1U<<10)  // Set bit 10 to 1
*  &=~(1U<<11) //  Set bit 11 to 0*/
int main(void)
{
	/*1. Enable clock access to GPIOA*/
	RCC_AHB1EN_R  |=  GPIOAEN;
	/*2.Set PA5 as output pin*/
	GPIOA_MODE_R  |= (1U<<10);  // Set bit 10 to 1
	GPIOA_MODE_R  &=~(1U<<11); //  Set bit 11 to 0
	while(1)
	{
		/*3.Set PA5 high*/
		//GPIOA_OD_R |= LED_PIN;
		/*4:Experiment 2 : toggle PA5*/
		GPIOA_OD_R ^= LED_PIN;
		for(int i=0;i<100000;i++){}
	}
}
